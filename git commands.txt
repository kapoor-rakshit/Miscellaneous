
NOTE  :  PLEASE MAKE SURE THAT PATH var is having value for git ((eg:- D:\Git\cmd)) in ACCOUNT or SYSTEM VARIABLES


Create a new repository on GitHub.   (github.com) 
To avoid errors, do not initialize the new repository with README, license, or gitignore files. 
You can add these files after your project has been pushed to GitHub.

Open Git Shell on Windows platform      (can be downloaded from official site)

Change the current working directory to your local project.

Initialize the local directory as a Git repository.
$ git init

Add the files in your new local repository. This stages them for the first commit. Mind the '.'
$ git add .

Commit the files that you've staged in your local repository.
$ git commit -m "First commit"

In the Command prompt, add the URL for the remote repository where your local repository will be pushed.
This command will map remote repository at <remote_repo_url> to a ref in your local repo under <remote_name> (eg:- origin)
use the <remote_name> on the command line in lieu of the whole URL.

$ git remote add <--remote_name--> <--remote repository URL-->

Verifies the new remote URL
$ git remote -v

Push the changes in your local repository to GitHub.   eg:- $ git push origin master
$ git push <remote_name> <branch_name>





Adding a file to a repository.
On your computer, move the file you'd like to upload to GitHub into the local directory that was created when you cloned the repository.

Open Git Bash.

Change the current working directory to your local repository.

Stage the file for commit to your local repository. Mind the '.'
$ git add .

Commit the file that you've staged in your local repository.
$ git commit -m "Add existing file"

Push the changes in your local repository to GitHub.
$ git push <remote_name> <branch_name>




Cloning a repository
Change the current working directory to the location where you want the cloned directory to be made.

NOTE : 'git clone' will automatically configure your repo with a remote pointed to the Git URL you cloned it from. 
This means that once you make changes to a file and commit them, you can git push those changes to the remote repository.
'git clone' command implicitly adds the <remote_name> 'origin'

Use git clone
$ git clone <--https://github.com/YOUR-USERNAME/YOUR-REPOSITORY-->

NOTE : Git’s design includes everything in each copy of a repository, every clone gets not only the files but every revision of every
file ever committed. Fortunately, Git supports the notion of a “shallow clone”, which is a more succinctly meaningful way of describing
a local repository with history truncated to a particular depth during the clone operation with "--depth" argument.

$ git clone --depth 1 <--https://github.com/jq/jq.git-->        // will copy only the latest revision of everything in the repository.





Working with branches
Each time that you want to commit a bug or a feature, you need to create a branch for it, which will be a copy of your master branch.

Create the branch on your local machine and switch in this branch
$ git checkout -b [name_of_your_new_branch]

Change working branch
$ git checkout [name_of_your_new_branch]

Push the branch on github. When you want to commit something in your branch, be sure to be in your branch.
$ git push <remote_name> [name_of_your_new_branch]

see all branches created. (* shows current branch on local machine)
$ git branch

Delete a branch on your local filesystem
$ git branch -d [name_of_your_new_branch]

To force the deletion of local branch on your filesystem
$ git branch -D [name_of_your_new_branch]

Delete the branch on github.  Mind the ':' for deletion
$ git push <remote_name> :[name_of_your_new_branch]





Working with remotes

list the shortnames of each remote handle you’ve specified.
If you’ve cloned your repository, you should at least see origin — that is the default name Git gives to the server you cloned from
$ git remote

use param -v which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote
$ git remote -v

Inspecting a Remote
$ git remote show <remote_name>

Renaming remote
$ git remote rename <remote_name> <new_remote_name>

Removing remote
$ git remote remove <remote_name>




Update local repo
to fetch and merge remote changes to local repository

$ git pull <remote_name> <branch_name>



GIT CONFIG
configure username and email with which user want to push commits as The Git username is not the same as GitHub username.
GitHub uses the email address set in local Git configuration to associate commits pushed from the command line with GitHub account.

$ git config --global user.name "kapoor-rakshit"
$ git config --global user.email "email@example.com"      // --global  , setting(s) for every repository on your computer

$ git config user.name "SOPHO"
$ git config user.email "email@example.com"              //              setting(s) for cur dir repo

$ git config --global user.name
$ git config user.name                                  // NO arg passed , check setting(s)

$ git config --global --unset user.name                 // REMOVE key-value from .config file

$ git config --list                                     // Describes the .config file



Log
study repository history using

$ git log                                         //no file name displayed

$ git log --author = <--AUTHOR-->                 //particular author

$ git log --pretty = oneline                     //only commits

$ git log --name-status                          //shows file names changed along with commits


