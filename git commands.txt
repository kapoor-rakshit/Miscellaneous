
NOTE  :  PLEASE MAKE SURE THAT PATH var is having value for git ((eg:- D:\Git\cmd)) in ACCOUNT or SYSTEM VARIABLES


GIT ENV  or  Git's "three trees"
WORKING TREE is what is actually in the files that you are currently working on.
     It is representative of the immediate changes made to content in files and directories.
INDEX is a staging area where the new commit is prepared.
     Essentially, the contents of the index are what will go into the new commit.
       $ git ls-files            // a list of file names with paths that are currently part of the index
       $ git ls-files --stage    // staged contents' mode bits | object name (SHAid) | and stage number | file names with paths
HEAD is a pointer to the branch or commit that you last checked out, and which will be the parent of a new commit.
     so when you commit, you are updating HEAD to your new commit, which matches the index (STAGING AREA).
     
NOTE : $ git add <path>      , updates the index from the working tree.
     : $ git checkout <path> , updates working tree from index.




Create a new repository on GitHub.   (github.com) 
To avoid errors, do not initialize the new repository with README, license, or gitignore files. 
You can add these files after your project has been pushed to GitHub.

Open Git Shell on Windows platform      (can be downloaded from official site)

Change the current working directory to your local project.

Initialize the local directory as a Git repository.
$ git init

Add the files in your new local repository. This stages them for the first commit. Mind the '.' for staging/unstaging all files
$ git add .

Commit the files that you've staged in your local repository.
$ git commit -m "First commit"            // -m   :  message

In the Command prompt, add the URL for the remote repository where your local repository will be pushed.
This command will map remote repository at <remote_repo_url> to a ref in your local repo under <remote_name> (eg:- origin)
use the <remote_name> on the command line in lieu of the whole URL.

$ git remote add <--remote_name--> <--remote repository URL-->

Verifies the new remote URL
$ git remote -v

Push the changes in your local repository to GitHub.   eg:- $ git push origin master
$ git push <remote_name> <branch_name>




Adding a file to a repository.
On your computer, move the file you'd like to upload to GitHub into the local directory that was created when you cloned the repository.

Open Git Bash.

Change the current working directory to your local repository.

Stage the file for commit to your local repository. Mind the '.'
$ git add .

Commit the file that you've staged in your local repository.
$ git commit -m "Add existing file"

Push the changes in your local repository to GitHub.
$ git push <remote_name> <branch_name>



GIT add
$ git add .
$ git add -A
$ git add --all                                  // Stage All (modified, new, deleted) files

$ git add -u
$ git add --update                               // Stage (modified, deleted) files only

$ git add --ignore-removal                       // Stage (modified, new) files only



GIT IGNORE
# Reference : https://git-scm.com/docs/gitignore

# A gitignore file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected.
# Each line in a gitignore file specifies a pattern. 
# A line starting with # serves as a comment. Put a backslash ("\#") in front of the first hash for patterns that begin with a hash.
# Trailing spaces are ignored unless they are quoted with backslash ("\ ")
# An optional prefix "!" which negates the pattern

# If the pattern ends with a slash, it will find match with directory but NOT match a regular file.

# "*" matches anything except "/"
# "?" matches any one character except "/"
# "[]" matches one character in a selected range

# A leading slash matches the beginning of the pathname.

# A leading "**" followed by a slash means match in all directories
# A trailing "/**" matches everything inside
# A slash followed by two consecutive asterisks then a slash matches zero or more directories

ngproj/reference_screenshots/




Cloning a repository
Change the current working directory to the location where you want the cloned directory to be made.

NOTE : 'git clone' will automatically configure your repo with a remote pointed to the Git URL you cloned it from. 
This means that once you make changes to a file and commit them, you can git push those changes to the remote repository.
'git clone' command implicitly adds the <remote_name> 'origin'

Use git clone
$ git clone <--https://github.com/YOUR-USERNAME/YOUR-REPOSITORY-->

NOTE : Git’s design includes everything in each copy of a repository, every clone gets not only the files but every revision of every
file ever committed. Fortunately, Git supports the notion of a “shallow clone”, which is a more succinctly meaningful way of describing
a local repository with history truncated to a particular depth during the clone operation with "--depth" argument.

$ git clone --depth 1 <--https://github.com/jq/jq.git-->       // clone with a history truncated to the specified number of commits of all branches

Clone only specific BRANCH
$ git clone -b <branch> <remote_repo_URL>                     // clone a branch with history/commits of all branches

$ git clone -b <branch> --single-branch <remote_repo_URL>     // add --single-branch to prevent fetching history/commits of all branches





Working with branches
Each time that you want to commit a bug or a feature, you need to create a branch for it, which will be a copy of your master branch.

Create the branch on your local machine and switch in this branch
This will give you a new branch with the same state as branch currently we are on.
$ git checkout -b [new_branch]
$ git checkout -b [new_branch] [old_branch]                   // new_branch will be copy of old_branch

Change working branch
$ git checkout [name_of_your_new_branch]

Create new branch without switching
$ git branch [new_branch]
$ git branch [new_branch] [old_branch]

Push the branch on github. When you want to commit something in your branch, be sure to be in your branch.
$ git push <remote_name> [name_of_your_new_branch]

see all branches created. (* shows current branch on local machine)
$ git branch

rename a branch
$ git branch -m [old-name] [new-name]          # Rename your local branch
$ git push origin :[old_name]                  # Delete old-name remote branch
$ git push origin -u [new-name]                # Reset the upstream branch for the new-name local branch

Delete a branch on your local filesystem
$ git branch -d [name_of_your_new_branch]

To force the deletion of local branch on your filesystem
$ git branch -D [name_of_your_new_branch]

Delete the branch on github.  Mind the ':' for deletion
$ git push <remote_name> :[name_of_your_new_branch]

shows remote tracking branches that appear in red.
These are read-only copies of the code as it appears on the remote.
Every time we execute git pull or git fetch commands, we update remote tracking branches.
$ git branch --all





Working with remotes
list the shortnames of each remote handle you’ve specified.
If you’ve cloned your repository, you should at least see origin — that is the default name Git gives to the server you cloned from
$ git remote

use param -v which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote
$ git remote -v

Inspecting a Remote
$ git remote show <remote_name>

Renaming remote
$ git remote rename <remote_name> <new_remote_name>

Removing remote
$ git remote remove <remote_name>




GIT stash
Git has an area called the stash where you can temporarily store a snapshot of your changes without committing them to the repository.
It’s separate from the working directory, the staging area, or the repository.
This functionality is useful when you’ve made changes to a branch that you aren’t ready to commit,
but you need to switch to another branch.
The command saves your local modifications away and reverts the working directory to match the HEAD commit (latest) for that branch.
$ git stash save "optional message for yourself"

a list of your saved snapshots in the format stash@{ID}: BRANCH-FOR-WHICH-STASHED: MESSAGE
the latest stash made is in the top, id value is {0}
$ git stash list

see a summary of stash made, If you forgot what changes were made in the stash
$ git stash show                               // latest stash, {0}
$ git stash show -p                            // see the typical diff-style patch layout (-p)
                                                  // -What this line looks like on branch
                                                  // +What this line looks like with stashed changes
$ git stash show -p stash@{1}                 // specific stash

apply changes to current branch and leaves a copy in the stash
$ git stash apply                             // latest stash, {0}
$ git stash apply stash@{1}                   // specific stash

creates a new branch with stash, and then deletes the latest stash (like stash pop)
$ git stash branch <branch_name>             // latest stash, {0}
$ git stash branch <branch_name> stash@{1}   // specific stash

applies the changes and removes the files from the stash
$ git stash pop                              // latest stash, {0}
$ git stash pop stash@{1}                    // specific stash

remove stashed changes without applying them
$ git stash drop                            // latest stash, {0}
$ git stash drop stash@{1}                  // specific stash

clear the entire stash
$ git stash clear




GIT PULL REQUEST (PR)
Contributions are made by developer community through pull requests,
which request that a project accept changes you have made to its code repository.
     Create a copy of the repository on Github/Bitbucket/Gitlab ie Fork the Repository
     Clone the repository that you have Forked to have local copy
     Create a New Branch
     Make Changes Locally and push to repo that you have Forked on Github/Bitbucket/Gitlab
     Navigate to repo that you have Forked, and press the “New pull request” button.
     Select the appropriate repository from the drop-down menu and the appropriate branch. 
          Left side is where TO send request and right side is FROM where to send request.
     Make sure to update and rebase your local code with Original repository (from where forked) while waiting to have PR reviewed.




GIT fetch
On its own, git fetch updates all the remote tracking branches in local repository
No changes are actually reflected on any of the local working branches
This makes fetching a safe way to review commits before integrating them with your local repository
$ git fetch <remote_name>                       // Fetch all branches, commits, files from <remote_name>
$ git fetch <remote_name> <branch_name>         // Fetch only the specified <branch_name> from <remote_name>
$ git fetch --all                               // Fetch all remotes

Fetched content has to be explicitly checked out using the git checkout command
$ git branch --all                              // check names of remote tracking branch
$ git checkout <remote_name>/<branch_name>      // switch to remote tracking branch, NOTE : use of /

For purposes of reviewing, PRs (Pull Request) in remote should be fetched to the local repo.
ID is the pull request id and BRANCHNAME is the name of the branch that we want to create. 
Once the branch has been created we can switch to that brach.
$ git fetch <remote_name> pull/ID/head:BRANCHNAME




GIT merge
Without any arguments, git merge will merge the corresponding remote tracking branch to the local working branch.
$ git merge
$ git merge <branch_name>                     // merge changes on a seperate branch to current branch

Fast Forward merge
     A fast-forward merge can occur when there is a linear path from the current branch tip to the target branch.
Three way merge
     When there is not a linear path to the target branch, Git has no choice but to combine them via a 3-way merge. 
     3-way merges use a dedicated commit to tie together the two histories. 
     The nomenclature comes from fact that Git uses three commits to generate merge commit: the two branch tips and their common ancestor.
$ git merge --no-ff <branch_name>            // generates a merge commit (even if it was a fast-forward merge).

Resolving conflict
If the two branches you're trying to merge both changed the same part of the same file, 
Git won't be able to figure out which version to use.
When such a situation occurs, it stops right before the merge commit so that you can resolve the conflicts manually.
When you encounter merge conflict, running '$ git status' command shows you which files need to be resolved.
When Git encounters conflict during a merge, It will edit content of affected files with visual indicators that mark both sides of conflicted content. 
These visual markers are: <<<<<<<, =======, and >>>>>>>. Content before ======= marker is receiving branch and part after is merging branch.
Once identified conflicting sections, fix up the merge to your liking and exact same process as committing an ordinary snapshot. ie '$ git add' , '$ git commit'




GIT cherry-pick
Cherry picking is the act of picking a commit from a branch and applying it to another.
It enables arbitrary Git commits to be picked by reference and appended to the current working HEAD.
Usage : 
      It can be useful for undoing changes.
      There may be some shared code between product sectors. Like backend and frontend, which can be picked from other and applied.
      The new patch commit of a bug can be cherry-picked directly to master branch to fix the bug before it effects more users.

$ git checkout <TARGET_BRANCH>                       // First checkout to branch , where to apply cherry picked commit.

                                a - b - c - d        <TARGET_BRANCH>
                                    \
                                     e - f - g       <Feature_BRANCH>

$ git cherry-pick <SHAid>                             // Find a commit reference <SHAid> by using   $ git log

                                a - b - c - d - f     <TARGET_BRANCH>
                                    \
                                     e - f - g        <Feature_BRANCH>

$ git cherry-pick -edit <SHAid>                      // Prompt for a commit message before applying the cherry-pick operation

$ git cherry-pick --no-commit <SHAid>                // Instead of making new commit it will move contents of target commit into working directory of current branch.




GIT rebase
Rebasing is an alternative to merging. 
Instead of creating a new commit that combines the two branches, it moves the commits of one of the branches on top of the other.

                                             A---B---C        // <branch>
                                           /
                                      D---E---F---G           // <upstream>
				      
All changes made by commits in the current branch but that are not in <upstream> are saved to a temporary area.
The commits that were previously saved into the temporary area are then reapplied to the current branch, one by one, in order.		     

				       A'--B'--C'             // <branch>
                                      /
                         D---E---F---G                        // <upstream>
			 
Note that any commits in HEAD which introduce the same textual changes as a commit in HEAD..<upstream> are omitted.
(i.e a patch already accepted upstream with a different commit message or timestamp will be skipped)
(eg: if A and F introduce same set of changes but have different committer information)

                                       B'--C'                 // <branch>
                                      /
                         D---E---F---G                        // <upstream>

$ git rebase <upstream> <branch>      // eg : git rebase master topic
                                      // git checkout <branch> followed by git rebase <upstream>.
				      // When rebase exits, <branch> will remain the checked-out branch.




GIT pull
git pull is a combination command, equal to git fetch + git merge.
If you have uncommitted changes, the merge part of the git pull command will fail and your local branch will be untouched.
Thus, you should always commit your changes in a branch before pulling new commits from a remote repository.

                                            A---B---C    branch on remoteURL
	                                   /
                                      D---E---F---G      branch in local repository
                                      
"git pull" will fetch and replay the changes from the remote branch since it diverged from the local branch (i.e. E) 
until its current commit (C) on top of branch and record the result in a new commit along with the names of the two parent commits (A, B)
and a log message from the user describing the changes.

                                         A---B---C       branch on remoteURL
	                                /         \
                                   D---E---F---G---H     branch in local repository
$ git pull <remote_name> <branch_name>

You can pull using rebase instead of merge.
That takes your commits that are not on the remote version of your branch and 
reworks/rebases them so that they're ahead of (on top of) the new commits you pull in with your pull.
$  git pull --rebase <remote_name> <branch_name>

To set it up so every branch you ever create on any repository is set to pull with rebase
$ git config --global branch.autosetuprebase always

Limit pull to specified commit history
$ git pull --depth 1 <remote_name> <branch_name>




GIT reset
Unstage a file
If you moved a file into the staging area with git add ,  but no longer want it to be part of a commit,
you can use git reset to unstage that file:
$ git reset HEAD <FILE-NAME>
$ git reset HEAD .                             // unstage all files from index (staging area), NOTE : use of '.'

Reset a branch to a prior commit
It basically rewinds the state of your branch to specified <COMMIT> , synatx : $ git reset <MODE> <COMMIT>
$ git reset 
$ git reset --mixed HEAD

--soft : does not reset staging index or working tree, but resets HEAD to commit.
         Changes all files to “Changes to be commited” in '$ git status'.
--mixed: resets staging index but not the working tree.
--hard : resets staging index and working tree. 
--merge: resets the index and updates the files in the working tree that are different between commit and HEAD,
         but keeps those which are different between the index and working tree
--keep : resets index entries and updates files in the working tree that are different between commit and HEAD.
         If a file that is different between commit and HEAD has local changes, the reset is aborted

<COMMIT> can be HEAD or any Git SHA-1 commit hash.
If you omit the <MODE>, it defaults to --mixed.
If you omit the <COMMIT>, it defaults to HEAD.




GIT revert
Git revert is a safer alternative to git reset in regards to losing work.
    git reset , removes the commit from the commit history, 
    git revert, appends a new commit with the resulting inverse content.
    git reset , can only work backward from the current commit, 
    git revert, is able to target an individual commit at an arbitrary point in the history.
This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.
git revert undoes a single commit to it's parent.
it does NOT "revert" back to the previous state of a project by removing all subsequent commits.

$ git revert HEAD                       // passed in the HEAD ref.  or  any commit SHAid




GIT CONFIG
configure username and email with which user want to push commits as The Git username is not the same as GitHub username.
GitHub uses the email address set in local Git configuration to associate commits pushed from the command line with GitHub account.

$ git config --global user.name "kapoor-rakshit"
$ git config --global user.email "email@example.com"      // --global  , setting(s) for every repository on your computer

$ git config user.name "SOPHO"
$ git config user.email "email@example.com"              //              setting(s) for cur dir repo

$ git config --global user.name
$ git config user.name                                  // NO arg passed , check setting(s)

$ git config --global --unset user.name                 // REMOVE key-value from .config file

$ git config --list                                     // Describes the .config file




GIT log
it displays all of the commits in a respository’s history
displays each commit's    Secure Hash Algorithm (SHA) | author | date | commit message
Navigating Git Log
Git uses the Less terminal pager to page through the commit history. You can navigate it with the following commands:
to scroll down by one line, use j or ↓
to scroll up by one line, use k or ↑
to scroll down by one page, use the spacebar or the Page Down button
to scroll up by one page, use b or the Page Up button
to quit the log, use q

$ git log
$ git log --all                                  // asks for the logs of all refs, basically branches and tags.
$ git log --oneline                              // one commit per line | the first seven characters of the SHA | commit message
$ git log --stat                                 // files modified in each commit | number of lines added/removed | summary line with total number of files and lines changed
$ git log --patch   or   $ git log -p            // files you modified | location of lines you added/removed | specific changes you made
$ git log --author=<--AUTHOR-->                  // particular author
$ git log --pretty=oneline                       // prettify
$ git log --name-status                          // shows file status in commits, just like 'git status -s'
$ git log <SHAid>                                // display commit with <SHAid> and all the commits made before this commit.
$ git log --graph --oneline                      // view git log as a graph




GIT bisect
Use a binary search algorithm to find which commit in your project’s history introduced a bug.
You use it by first telling it a "bad" commit that is known to contain the bug, and a "good" commit that is known to be before the bug was introduced.
Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is "good" or "bad".
It continues narrowing down the range until it finds the exact commit that introduced the change.

$ git bisect start
$ git bisect bad                           // Current version is bad
$ git bisect good <SHAid-of-good-commit>   // Commit that is known to be good

You should now compile the checked-out version and test it. If that version works correctly, type
$ git bisect good

If that version is broken, type
$ git bisect bad

Keep repeating the process: compile the tree, test it, and depending on whether it is good or bad 
run git bisect good or git bisect bad to ask for the next commit that needs testing.

After a bisect session, to clean up the bisection state and return to the original HEAD, issue the following command:
$ git bisect reset

By default, this will return your tree to the commit that was checked out before git bisect start.
With an optional argument, you can return to a different commit instead:
$ git bisect reset <SHAid>

Sometimes you are not looking for the commit that introduced a breakage,
but rather for a commit that caused a change between some other "old" state and "new" state. 
For example, you might be looking for the commit that introduced a particular fix
You can use the terms "old" and "new", respectively, in place of "good" and "bad".
(But note that you cannot mix "good" and "bad" with "old" and "new" in a single session.)




GIT blame
examine specific points of a file's history and get context as to who the last author was that modified the line.
git blame only operates on individual files. A file-path is required for any useful output.
$ git blame <file_path>                          // Id | Author | Timestamp | Line Number | Line Content

$ git blame -L 1,5 <file_path>                   // -L option will restrict the output to the requested line range (here 1 to 5)

$ git blame -e <file_path>                       // -e option shows the authors email address instead of username

$ git blame -w <file_path>                       // -w option ignores whitespace changes

$ git blame -M <file_path>                       // -M option detects moved or copied lines within in the same file. 
                                                 // This will report original author of lines instead of last author that moved or copied lines
						 
$ git blame -C <file_path>                       // -C option detects lines that were moved or copied from other files. 
                                                 // This will report original author of lines instead of last author that moved or copied lines.



GIT status
Show the working tree status
Displays paths that have differences between the index file and the current HEAD commit
$ git status
$ git status -v                                 // verbose output
$ git status -s                                 // short-format output



GIT diff
By default git diff will show you any uncommitted changes since the last commit.
$ git diff                                         // the @@ symbol, that means beginning of a new chunk or set of modifications
					           // @@ -34,6 +34,8 @@ , 6 lines have been extracted starting from line number 34. 8 lines have been added starting at line number 34.
                                                   // file markers (+ -) help you to identify which file the changes belong to
Comparing files between two different commits
$ git diff <SHAid1> <SHAid2>                       // SHAid can be found using  $ git log

Comparing two branches
$ git diff <branch1> <branch2>

Compare a specific file across branches
$ git diff <branch1> <branch2> <path_of_file>      // pass path of the file as the third argument to git diff



