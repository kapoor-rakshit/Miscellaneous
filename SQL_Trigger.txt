
/* REFERENCE : https://www.geeksforgeeks.org/sql-trigger-student-database/ */

-- A trigger is a stored procedure in database which automatically invokes whenever a special event in the database occurs.

-- CREATE TRIGGER <trigger_name> <BEFORE | AFTER>  <INSERT | UPDATE | DELETE>  ON <table_name>  [FOR EACH ROW]  <trigger_body>;

-- The SQL standard defines two types of triggers: 
   row-level triggers (FOR EACH ROW) and statement-level triggers.
-- A row-level trigger is a trigger whose [trigger_body] fire for each row to be changed. Accordingly, it has [for each row]
-- A table level trigger is a trigger whose [trigger_body] doesn't fire for each row changed but just once. Accordingly, it lacks [for each row]

-- To distinguish between the value of the columns BEFORE and AFTER the DML has fired, use the NEW and OLD modifiers.

-- Order of execution of triggers is undeterministic (or random) except that all BEFORE triggers fire before the AFTER triggers.


/* 1 */
/* use of SET in TRIGGER BODY */
create trigger stud_marks
before INSERT
on
Student
for each row
set Student.total = Student.subj1 + Student.subj2 + Student.subj3, Student.per = Student.total * 60 / 100;


/* 2 */
/* an example from WIPRO */
USE rsmedb;
delimiter #
CREATE DEFINER=`hmiuser`@`%` TRIGGER `loginDetail_after_insert` AFTER INSERT ON `loginDetail` FOR EACH ROW
BEGIN
IF(STRCMP(new.role, "ADMIN") = 0) THEN
          SET @role_from_loginDetail = 'ROLE_ADMIN';
ELSE
          SET @role_from_loginDetail = 'ROLE_USER';
END IF;
INSERT INTO loginDetailTable (username, password, authority) VALUES (new.loginId, new.password, @role_from_loginDetail);
END#


/* 3 */
/* Checking if trigger added */
SELECT * FROM INFORMATION_SCHEMA.TRIGGERS;


