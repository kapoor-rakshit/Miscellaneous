
/* SCHEMA */
-- In some database system schema represents a part of database or a collection of Tables, and collection of schema is a database.
-- However in MySQL schema is synonym of database. so CREATE SCHEMA is nothing but CREATE DATABASE.




/* USER, GRANTS, REVOKE */
/* CREATE NEW USER */
mysql> CREATE USER 'newusername'@'localhost' IDENTIFIED BY 'password';

/* DELETE USER */
mysql> DROP USER ‘username’@‘localhost’;

-- At this point newuser created has no permissions to do anything with the databases.
-- In fact, even if newuser tries to login (with the password, password), they will not be able to reach the MySQL shell.
-- we need to grant permissions to user for same.

/* PERMISSIONS */
-- ALL PRIVILEGES  allow a MySQL user full access to a designated database (or if no database is selected, global access across the system)
-- CREATE          allows them to create new tables or databases
-- DROP            allows them to them to delete tables or databases
-- DELETE          allows them to delete rows from tables
-- INSERT          allows them to insert rows into tables
-- SELECT          allows them to use the SELECT command to read through databases
-- UPDATE          allow them to update table rows
-- GRANT OPTION    allows them to grant or revoke other users’ privileges

-- Syntax : GRANT type_of_permission,type_of_permission,type_of_permission ON database_name.table_name TO ‘username’@'IP_ADDRESS_OF_MACHINE’;
mysql> GRANT ALL PRIVILEGES ON *.* TO 'username'@'localhost';        -- here ALL PRIVILEGES are granted on all databases (*) and on all tables (*)

/* To REVOKE a PERMISSION */
-- Syntax : REVOKE type_of_permission ON database_name.table_name FROM ‘username’@‘localhost’;

/* CHECK GRANTS INFORMATION */
-- default "mysql" DB contain grant information in following tables
-- user             : User accounts, static global privileges, and other nonprivilege columns.
-- db               : Database-level privileges.
-- tables_priv      : Table-level privileges.
-- columns_priv     : Column-level privileges.
-- procs_priv       : Stored procedure and function privileges.
-- password_history : Password change history.




/* VARIABLES */
-- There are mainly 3 types of variables in MySQL:

/* 1 */ (User-defined variables (prefixed with @))
-- To create user-defined SESSION variables, use format @variable_name.
-- The user-defined variables are not case-sensitive. It means that the @id and @ID are the same.
-- A user-defined variable defined by one client is not visible by other clients 
--   ie user-defined variable is session-specific and value is not reinitialized rather retained for operations untill session ends
-- These variables can’t be declared, they are only initialized i.e at time of declaration they should be assigned a value.
-- A user-defined variable can hold single value only. If SELECT statement returns multiple values, variable will take value of last row in result.
-- Syntax : SET @variable_name := value;
mysql> SET @start := 1, @finish := 10;                                                    -- we can use either := or = , but it's still better to have := with variables.
mysql> SELECT @counter;                                                                   -- get value of assigned variable
mysql> SELECT @buyPrice:=buyprice FROM products WHERE buyprice > 95 ORDER BY buyprice;    -- multiple rows in select query ,but one result in variable.

/* 2 */ (Local Variables (no prefix))
-- Local variables needs to be declared using DECLARE before accessing it.
-- Syntax : DECLARE variable_name datatype(size) [DEFAULT default_value];
          : SET variable_name := value;
-- If you declare a variable without specifying a DEFAULT value, its value is NULL.
mysql> DECLARE mystr VARCHAR(255) DEFAULT "default_value";
mysql> DECLARE x,y INT DEFAULT 0;

/* 3 */ (Server System Variables (prefixed with @@))
-- Syntax : SELECT @@var_name;
mysql> SELECT @@sort_buffer_size;




/* IF-ELSEIF-ELSE */
IF(<condition>) THEN
   <statements>;
ELSEIF(<elseif-condition>) THEN
   <elseif-statements>;
ELSE
   <else-statements>;
END IF;




/* CASE statement */
CASE <case_value>
   WHEN <when_value1> THEN <statements>
   WHEN <when_value2> THEN <statements>
   ...
   ELSE <else-statements>
END CASE;




/* LOOP */
<loop_label>: LOOP
    <SQL_statements_if_any>
    IF <condition> THEN
        LEAVE <loop_label>;              -- LEAVE is similar to "break" ie terminate the loop , exit flow control that has given label.
    ELSEIF <condition> THEN
        ITERATE <loop_label>;            -- ITERATE is similar to "continue" , SKIP remaining flow control statements after it that has given label.
    END IF;
    <SQL_statements_if_any>
END LOOP;




/* BUILT-IN Functions */
-- COALESCE(NULL, 'A', 'B', NULL)        : returns first non-null value in list of expressions or NULL if all values in list are NULL.

-- SUBSTR(string, start, chars_required) : extracts a substring from a string, If omitted 'chars_required', whole string will be returned (from start position)
   SUBSTRING(string, start, chars_required)
   MID("SQL Tutorial", -5, chars_required): -ve value traverse from end

-- CURRENT_DATE()                      : returns "YYYY-MM-DD" (string)
-- CURRENT_TIME()                      : returns "HH-MM-SS" (string)
-- CURRENT_TIMESTAMP()                 : returns "YYYY-MM-DD HH-MM-SS" (string)




/* CURSOR */
/* REFERENCE : https://www.mysqltutorial.org/mysql-cursor */
-- A cursor allows you to iterate a set of rows returned by a query and process each row individually. 
-- Cursors can be used in stored procedures, stored functions, and triggers.
-- Cursor is a Temporary Memory. It is Allocated by Database Server at Time of Performing DML operations on Table by User.
-- MySQL cursor is read-only, non-scrollable and asensitive.
   -- Read-only: you cannot update data in the underlying table through the cursor.
   -- Non-scrollable: you can only fetch rows in the order determined by the SELECT statement. 
                      You cannot fetch rows in the reversed order. In addition, you cannot skip rows or jump to a specific row in the result set.
   -- Asensitive: There are two kinds of cursors: asensitive cursor and insensitive cursor. 
                  An asensitive cursor points to the actual data, whereas an insensitive cursor uses a temporary copy of the data. 
                  An asensitive cursor performs faster than an insensitive cursor because it does not have to make a temporary copy of data. 
                  However, any change that made to the data from other connections will affect the data that is being used by an asensitive cursor, 
                  therefore, it is safer if you do not update the data that is being used by an asensitive cursor.
                  MySQL cursor is asensitive.
-- Declare a cursor
   mysql> DECLARE <cursor_variable> CURSOR FOR <SELECT_statement>;
-- We must also declare a NOT FOUND handler to handle the situation when the cursor could not find any row.
-- handler declaration must appear after variable and cursor declaration.
   mysql> DECLARE <notFoundVar> INTEGER DEFAULT 0;
   mysql> DECLARE CONTINUE HANDLER FOR NOT FOUND SET <notFoundVar> = 1;
-- Open the cursor
   mysql> OPEN <cursor_variable>;
-- Retrieve the next row pointed by the cursor and move the cursor to the next row in the result set
   mysql> FETCH <cursor_variable> INTO <variable>;
-- Deactivate the cursor and release the memory associated with it
   mysql> CLOSE <cursor_variable>;
   
   
   

/* SQL Injection */
/* REFERENCE : https://www.w3schools.com/sql/sql_injection.asp */
-- SQL injection is the placement of malicious code in SQL statements, via web page input.
-- SQL injection is a code injection technique that might destroy your database.
-- SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, 
   the user gives you an SQL statement that you will unknowingly run on your database.
-- SQL Injection Based on 1=1 is Always True.
   Following statement got user-id as        105 OR 1=1        from user input and it was run to get access to all the user names and passwords in table.
   mysql> SELECT * FROM Users WHERE UserId = 105 OR 1=1;
-- SQL Injection Based on ""="" is Always True.
   mysql> SELECT * FROM Users WHERE Name ="" or ""="" AND Pass ="" or ""="";
-- SQL Injection Based on Batched SQL Statements
   Following example got user-id as          105; DROP TABLE Suppliers      from user input
   mysql> SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;
-- Use SQL Parameters for Protection against SQL Injection.
   SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.
   The SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of the SQL to be executed.
   
   
   
   
/* ANY and ALL operators */
-- The ANY and ALL operators are used with a WHERE or HAVING clause.
-- The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

-- The ANY operator returns true if any of the subquery values meet the <condition>.
-- ANY compares a value to each value in a list or results from a query and evaluates to true if the result of an inner query contains at least one row.
   mysql> SELECT <column_name(s)> FROM <table_name1> WHERE <column_name> <operator> ANY (SELECT <column_name> FROM <table_name2> WHERE <condition>);
   
-- The ALL operator returns true if all of the subquery values meet the <condition>.
-- ALL operator is used to select all tuples of SELECT STATEMENT. It is also used to compare a value to every value in another value set or result from a subquery.
   mysql> SELECT <column_name(s)> FROM <table_name1> WHERE <column_name> <operator> ALL (SELECT <column_name> FROM <table_name2> WHERE <condition>);
   
   
   
   
/* SELECT INTO */
-- The SELECT INTO statement copies data from one table into a NEW table.
   mysql> SELECT * INTO <newtable> [IN <externaldb>] FROM <oldtable> WHERE <condition>;
   
/* INSERT INTO SELECT */
-- The INSERT INTO SELECT statement copies data from one table and inserts it into ANOTHER EXISTING table.
-- INSERT INTO SELECT requires that data types in source and target tables match.
-- The existing records in the target table are unaffected.
   mysql> INSERT INTO <table2> (column1, column2, column3) SELECT column1, column2, column3 FROM <table1> WHERE <condition>;
   
   
   
   
/* CANDIDATE KEYS */
-- COLUMNS eligible for being a PRIMARY KEY (with constraint UNIQUE and NOT NULL) are CANDIDATE KEYS.

/* ALTERNATE KEYS */
-- CANDIDATE KEYS which do not become PRIMARY KEY are ALTERNATE KEYS.

/* COMPOSITE KEY */
-- When two or more columns collectively are used to uniquely identify records it is a COMPOSITE KEY.
   mysql> ALTER TABLE <persons> ADD CONSTRAINT <pk_person> PRIMARY KEY (<id>,<lastName>);

/* FOREIGN KEY */
-- A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY | UNIQUE constraint column in another table.
   NOTE : If that column of parent table do not have either PRIMARY KEY or UNIQUE constraint , foreign key constraint creation fails.
-- The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.
-- The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.
   -- It prevents invalid data from being inserted into the foreign key column of child table, because it has to be one of the values contained in the table it points to.
   -- It prevents deletion from parent table as it has candidate key being referenced by child table containing FOREIGN KEY constraint. However deletion from child table is allowed.
-- Examples
   -- 1
   -- The reference_option determines action which MySQL will take on child table when values in the parent key columns are deleted (ON DELETE) or updated (ON UPDATE) ie CASCADE (delete/update same as parent) | SET NULL (set NULL) | RESTRICT (reject)(default)
   mysql> CREATE TABLE Orders (
              OrderID int NOT NULL PRIMARY KEY,
              OrderNumber int NOT NULL,
              PersonID int,
              CONSTRAINT <fk_PersonID> FOREIGN KEY (<PersonID>) REFERENCES <Persons>(<PersonID>)
                         [ON DELETE reference_option]
                         [ON UPDATE reference_option]
          );
   -- 2
   -- ADD or DROP CONSTRAINT
   -- To obtain the generated constraint name of a table, you use the    mysql> SHOW CREATE TABLE <table_name>;
   mysql> ALTER TABLE <orders> ADD CONSTRAINT <fk_PersonID> FOREIGN KEY (<PersonID>) REFERENCES <Persons>(<PersonID>);
   mysql> ALTER TABLE <orders> DROP FOREIGN KEY <fk_PersonID>;
   
   -- 3
   -- Disabling/Enabling foreign key checks
   mysql> SET foreign_key_checks = 0;
   mysql> SET foreign_key_checks = 1;
   



/* TRANSACTION, SAVEPOINT, ROLLBACK, COMMIT */
-- By default, MySQL runs with autocommit mode enabled. each statement is atomic, as if it were surrounded by START TRANSACTION and COMMIT.
   You cannot use ROLLBACK to undo the effect; however, if an error occurs during statement execution, the statement is rolled back.
-- With START TRANSACTION, autocommit remains disabled until you end the transaction with COMMIT or ROLLBACK (ie rollback that does not name a savepoint)
   The autocommit mode then reverts to its previous state.
   
-- The SAVEPOINT statement sets a named transaction savepoint with a name of identifier. 
   If the current transaction has a savepoint with the same name, the old savepoint is deleted and a new one is set.
-- The RELEASE SAVEPOINT <savepoint> statement removes the named savepoint from the set of savepoints of the current transaction. 
   No commit or rollback occurs with this statement.
-- All savepoints of the current transaction are deleted if you execute a COMMIT or a ROLLBACK (ie rollback that does not name a savepoint).
   
-- The ROLLBACK TO SAVEPOINT statement rolls back a transaction to the named savepoint without terminating the transaction.
   Modifications that the current transaction made to rows after the savepoint was set are undone in the rollback.
   
-- Example
   -- 1
   mysql> START TRANSACTION;
   mysql> SAVEPOINT <initial_save>;
   mysql> <INSERT | UPDATE | DELETE ... operations performed on one or more tables>
   mysql> ROLLBACK TO SAVEPOINT <initial_save>;
   mysql> COMMIT;
   
   
   
   
/* INDEXING */
-- Indexes consist of rows and columns like tables but it stores data in a logically sorted manner.
-- Indexes are used to retrieve data from the database more quickly than otherwise. 
   Indexes are also used to enforce uniqueness in a table.
   The users cannot see the indexes.
-- Updating a table with indexes takes more time than updating a table without (because the indexes also need an update).
   Indexes also consume adequate amount of disk space
   So, only create indexes on columns that will be frequently searched against.
-- Types of Indexes
   -- CLUSTERED INDEX or PHYSICAL INDEX
      -- When you create a table with a PRIMARY KEY or UNIQUE KEY, MySQL automatically creates a special index named PRIMARY. 
         The PRIMARY index is special because the index itself is stored together with the data in the same table, hence CLUSTERED.
         Because a clustered index enforces the rows in sorted order physically, each table have only one clustered index.
      -- 1. PRIMARY Key           - a primary key is itself an index with properties UNIQUE and NOT NULL
      -- 2. UNIQUE Key            - UNIQUE property over column
   -- NON-CLUSTERED INDEX or LOGICAL INDEX
      -- Index is a separate data structure such as B-Tree that stores the key values used for faster lookups.
         There can be more than one non-clustered index.
      -- 1. Unique Index          - UNIQUE constraint on index
      -- 2. Full Text Index       - allows full text search ie creating an “index” for each “word” in the specified column.
      -- 3. Descending Index      - a regular index stored in reverse order.
      -- 4. Normal Index          - Default/Simple/Regular Index without constraints
-- Example
   -- 1
   -- Create an index on a combination of columns
   mysql> CREATE INDEX <index_name> ON <table_name> (<column1>, <column2>, ...);
   
   -- 2
   -- Create a unique index on a table. Duplicate values are not allowed for those combination of columns
   mysql> CREATE UNIQUE INDEX <index_name> ON <table_name> (<column1>, <column2>, ...);
   
   -- 3
   mysql> ALTER TABLE <table_name> DROP INDEX <index_name>;
   
   -- 4
   mysql> SHOW INDEXES FROM <table_name>;
   
   -- 5
   -- Demonstrate optimization done by an Index
   -- Say total rows are 10658 , with condition <county>='071' are 192 , with condition <county>='071' AND <zipcode>='06125' are 1
   mysql> EXPLAIN SELECT * FROM <zipcodes_tab> WHERE <county>='071';      // when no index is made to table it will search from all rows (all 10658 rows searched from) to select only <conditioned> rows 
                                                                          // as MySQL optimizer didn’t find any keys to use.
   mysql> CREATE INDEX <ind_county> ON <zipcodes_tab> (<county>);         // created index for `county` column
   mysql> EXPLAIN SELECT * FROM <zipcodes_tab> WHERE <county>='071';      // this will search using INDEX condition (only 192 rows searched from) and not WHERE condition , preventing search from all (10658) rows
   mysql> EXPLAIN SELECT * FROM <zipcodes_tab> WHERE <county>='071' AND <zipcode>='06125';     // this will search from using INDEX condition for <county> AND WHERE condition for <zipcode> ie (only 192 rows searched from)
   mysql> CREATE INDEX <ind_county_zipcode> ON <zipcodes_tab> (<county>, <zipcode>);           // created COMPOSITE INDEX
   mysql> EXPLAIN SELECT * FROM <zipcodes_tab> WHERE <county>='071' and <zipcode>='06125';           // this will search from using INDEX condition ie (only 1 row searched from)

